// Code generated by go-bindata.
// sources:
// ../../migrations/0001_initial.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcb\x92\xe2\x30\x0c\x3c\xc7\x5f\xa1\xe2\x44\x6a\x33\x55\xb3\xe7\x5c\xf7\x17\xf6\x9c\x12\xb6\x86\x51\x11\xdb\x59\x5b\xe1\xb1\x5f\xbf\x65\x16\xb0\x33\x90\xc0\xdc\xc0\xee\x6e\x4b\xad\x56\xde\xde\xe0\x87\xe5\x6d\x40\x21\xf8\x3d\x28\x1d\x28\xfd\x12\xdc\xf4\x04\x5b\x14\x3a\xe0\x09\xd6\xaa\xb2\xa8\x61\x73\x12\x42\x18\x02\x5b\x0c\x27\xd8\xd1\xa9\x51\x95\x43\x4b\xb0\xc7\xa0\x3f\x31\xac\x7f\xbe\xbf\xd7\x30\x3a\xfe\x33\x12\x38\x2f\xe0\xc6\xbe\x6f\x54\x65\x28\xea\xc0\x83\xb0\x77\x20\x74\x94\xf2\xee\xff\x7b\xa6\x43\x01\x61\x4b\x51\xd0\x0e\x70\x60\xf9\x3c\xff\x85\xbf\xde\x4d\xa4\xc6\xc1\x7c\x07\xfe\xc1\x21\x4a\x17\x89\xdc\x12\xa3\x51\x55\x8f\x2f\xe2\xbc\xc6\x73\x1f\x83\x67\x27\x8d\xaa\xb0\x17\x96\xd1\x10\x18\x3f\x26\xcb\x86\x40\x9a\x23\x7b\xa7\xea\x56\x5d\xdd\x64\x67\xe8\x08\x6c\x8e\xdd\xc5\xd1\xee\x6c\x9b\x77\xd9\xe1\x74\x50\xb7\xf3\x84\xc2\xa7\x92\x96\x8f\x97\xc8\x85\x6b\x25\x39\x1f\x2f\x91\xa7\x1e\x96\xfc\xc9\xcd\x92\xc4\xc4\xdd\x52\xa1\xbc\x48\x7e\x3d\x8c\x5f\x17\x05\x25\x65\x90\x0d\x6c\x78\x1b\x29\x30\xf6\x5f\x62\x98\xe3\x79\x9d\x3e\x04\xfa\xa0\x40\x4e\x53\xbc\xbd\xe7\x1d\x18\xea\x49\x08\x34\x46\x8d\x26\x4d\x74\x75\x9b\xf6\xea\xa5\x48\xad\xd8\x09\x85\x3d\xf6\xab\x22\xf6\x75\x89\x08\xc7\x6e\x40\xbd\x23\x89\x5d\x20\x4d\xbc\x27\x03\xec\xe4\x09\xa4\xf3\xbb\xaf\x28\x79\x2e\x54\x40\xc8\xb2\xc8\x1d\x42\x55\x97\x7d\x5c\x5b\xd4\x0d\x14\xdd\x36\x90\x5b\xa9\x97\xd3\x9a\x06\xd0\x25\x8b\xf3\xec\x2e\x43\xb1\xa8\x97\x06\x7f\x26\x66\x57\xef\xe8\x45\x39\x4f\x65\xae\xc5\x3e\x50\xc9\x7d\xb4\x4a\x95\x1f\xb4\x5f\xfe\xe0\x94\x09\x7e\x78\x26\xda\x2e\xa2\x6e\x55\x2e\xc3\x2c\xea\x0b\xe0\x3e\xbf\xad\x9a\xa3\xa6\xcd\x9f\xd5\xcd\xfb\x3d\x0b\xc9\x5b\x3c\x0b\x99\x2c\xea\x2c\xaa\x5c\xc6\x47\x7d\xb4\xea\x5f\x00\x00\x00\xff\xff\xaa\xc3\x00\xfa\x2c\x06\x00\x00")

func _0001_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialSql,
		"0001_initial.sql",
	)
}

func _0001_initialSql() (*asset, error) {
	bytes, err := _0001_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.sql", size: 1580, mode: os.FileMode(420), modTime: time.Unix(1490171668, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.sql": _0001_initialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.sql": &bintree{_0001_initialSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

